#+HTML_HEAD_EXTRA: <script type="text/x-mathjax-config">MathJax.Hub.Config({TeX: {extensions: ["color.js"]}})</script>
#+title: Return to the planet of the Javascript Primes

I finally broke down and decided to do the sensible thing: implement
Eratosthenes’ Seive in Javascript.

* Eratosthenes of Cyrene

#+caption: Eratosthenes
[[file:return-to-javascript-primes/Eratosthenes.jpg]]

Eratosthenes was an over-achieving Greek polymath. Born in Cyrene in
Greek north Africa around 276ʙᴄ, he, among other things, invented
geography, accurately measured the circumference of the Earth and gave
us the leap year. He also came up with his eponymous seive: a quick
way of finding prime numbers.

* Seive it

The seive works by removing composite (non-prime) numbers from the set
of the natural numbers by /seiving/ out the multiples of each prime,
one prime at a time.

Lets start with the numbers from two to twenty:

\[\{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\}\]

Two is a prime, so we remove any numbers greater than two that have
it as a divisor:

\[
\{2, 3, {\color{red}4}, 5, {\color{red}6}, 7, {\color{red}8}, 9, {\color{red}10},
 11, {\color{red}12}, 13, {\color{red}14}, 15, {\color{red}16}, 17, {\color{red}18},
 19, {\color{red}20}\}
\]

The next number that’s not already been seived out, three, must be a
prime, so we repeat the procedure for two and remove any multiples:

\[\{2, 3, 5, 7, {\color{red}9}, 11, 13, {\color{red}15}, 17, 19\}\]

Six, being divisble by two, is already removed, as are twelve and
eighteen, so the only numbers we remove this time are nine and
fifteen.

Five is the next number still in the list, but we don’t have any
numbers left that are divisble by it. In fact, because \(5^2\) is
greater than our biggest number, twenty, we know that we can stop
looking for primes. If our numbers continued up further we would
remove twenty-five, thirty-five, and so on, then move onto multiples
of seven. As it stands, our list is now:

\[\{2, 3, 5, 7, 11, 13, 17, 19\}\]

or, all the prime numbers under twenty-one.

* Solve it

Implementation is rather straight-forward. We create an array of a set
size and step through following the algorithm outlined above.

#+begin_src js :exports code
  function seive(primeList) {
    for (var p = 2 ; p < primeList.length ; p++) {
      if (primeList[p]) {
        // Only do this if p is marked as a prime
        
        for (var n = p*2 ; n < primeList.length ; n = n+p) {
          // increase n by p each time so we step through each integer
          // that can be divided by p, and if it's divisible by p, then
          // it's not prime
          primeList[n] = false;
        }
      }
    }
    return primeList;
  }

  // 0 and 1 are never prime
  var primeList = [false, false, true, true, true, true, true, true,
                   true, true, true, true, true, true, true, true,
                   true, true, true, true];

  return seive(primeList);

  /* 0 → false, 1 → false, 2 → true, 3 → true, 4 → false, 5 → true, &c. */
#+end_src
